#include <iostream>
#include <sstream>
#include <string>

#include <opencv2/opencv.hpp>
#include <opencv2/imgproc/imgproc.hpp>

// EvoBinSDK header
#include "evo_depthcamera.h"
#include "evo_matconverter.h"

#include <fstream>
#include <time.h>
#include <iomanip>
#include <chrono>
#include <sys/types.h>
#include <sys/stat.h>

evo::bino::DepthCamera camera;
using namespace std;
// using namespace sl;

bool running;

void handleKey(char key)
{
    switch (key)
    {
    case 27:
        running = false;
        break;
    default:
        break;
    }
}

int main(int argc, char** argv)
{
    // string data_dir = "/home/dzsb078/Documents/leadsense_data/";
    // string time_txt = "/home/dzsb078/Documents/leadsense_data/times.txt";

    time_t timep;
    time (&timep);
    char tmp[64];
    strftime(tmp, sizeof(tmp), "%Y%m%d%H%M%S",localtime(&timep) );
    string s_tmp(&tmp[0],&tmp[strlen(tmp)]);
    // std::cout << s_tmp << std::endl;

    //创建Leadsence_data文件夹
    std::string data_dir="/home/dzsb078/Documents/" + s_tmp + "_Stereo_Leadsence_data/";
    int flag=mkdir(data_dir.c_str(), 0777); 
    
    // if (access(data_dir.c_str(), 0) == -1) 
    // { 
    //     int flag=mkdir(data_dir.c_str(), 0777); 
    // } 

    //创建子文件夹
    std::string data_dir_image_0= data_dir + "image_0/";
    std::string data_dir_image_1= data_dir + "image_1/";
    std::string data_dir_image_0_raw= data_dir + "image_0_raw/";
    std::string data_dir_image_1_raw= data_dir + "image_1_raw/";
    std::string data_dir_image_depth= data_dir + "depth/";

    int flag_1=mkdir(data_dir_image_0.c_str(), 0777);
    int flag_2=mkdir(data_dir_image_1.c_str(), 0777);
    int flag_3=mkdir(data_dir_image_0_raw.c_str(), 0777);
    int flag_4=mkdir(data_dir_image_1_raw.c_str(), 0777);
    int flag_5=mkdir(data_dir_image_depth.c_str(), 0777);

    // if (access(data_dir_image_0.c_str(), 0) == -1) 
    // { 
    //     int flag=mkdir(data_dir_image_0.c_str(), 0777); 
    // } 

    // if (access(data_dir_image_1.c_str(), 0) == -1) 
    // { 
    //     int flag=mkdir(data_dir_image_1.c_str(), 0777); 
    // } 

    // if (access(data_dir_image_0_raw.c_str(), 0) == -1) 
    // { 
    //     int flag=mkdir(data_dir_image_0_raw.c_str(), 0777); 
    // } 

    // if (access(data_dir_image_1_raw.c_str(), 0) == -1) 
    // { 
    //     int flag=mkdir(data_dir_image_1_raw.c_str(), 0777); 
    // } 
    // if (access(data_dir_image_depth.c_str(), 0) == -1) 
    // { 
    //     int flag=mkdir(data_dir_image_depth.c_str(), 0777); 
    // }


    // string data_dir = "/home/dzsb078/Documents/zed_data/";
    string time_txt = data_dir + "times.txt";

    ofstream file_obj;
    file_obj.open(time_txt);
    int counter = 0;

    evo::bino::RESOLUTION_FPS_MODE res_mode = evo::bino::RESOLUTION_FPS_MODE_HD720_60;
    evo::RESULT_CODE res = camera.open(res_mode);
    std::cout << "depth camera open: " << result_code2str(res) << std::endl;
    //grab parameters
    evo::bino::GrabParameters grab_parameters;
    evo::bino::GrabParameters grab_parameters_raw;   //
    grab_parameters_raw.do_rectify = false;

    if (res == evo::RESULT_CODE_OK)
    {
        running = true;
        //evo Mat
        evo::Mat<unsigned char> evo_image_left, evo_image_right;
        evo::Mat<unsigned char> evo_image_left_raw, evo_image_right_raw;//
        //cv Mat
        cv::Mat cv_image_left, cv_image_right;
        cv::Mat cv_image_left_raw, cv_image_right_raw;//

        while(running)
        {
            if (camera.grab(grab_parameters) == evo::RESULT_CODE_OK)
            {
                evo_image_left = camera.retrieveView(evo::bino::VIEW_TYPE_LEFT, evo::MAT_TYPE_CPU);
                evo_image_right = camera.retrieveView(evo::bino::VIEW_TYPE_RIGHT, evo::MAT_TYPE_CPU);
            }

            if (camera.grab(grab_parameters_raw) == evo::RESULT_CODE_OK) //
            {
                evo_image_left_raw = camera.retrieveView(evo::bino::VIEW_TYPE_LEFT, evo::MAT_TYPE_CPU);
                evo_image_right_raw = camera.retrieveView(evo::bino::VIEW_TYPE_RIGHT, evo::MAT_TYPE_CPU);
            }

            cv_image_left = evo::evoMat2cvMat(evo_image_left);
            cv_image_right = evo::evoMat2cvMat(evo_image_right);

            evo_image_left_raw = evo::evoMat2cvMat(evo_image_left_raw); //
            evo_image_right_raw = evo::evoMat2cvMat(evo_image_right_raw);

            cv::cvtColor(cv_image_left, cv_image_left, CV_RGBA2BGR);
            cv::cvtColor(cv_image_right, cv_image_right, CV_RGBA2BGR);

            cv::cvtColor(cv_image_left_raw, cv_image_left_raw, CV_RGBA2BGR); //
            cv::cvtColor(cv_image_right_raw, cv_image_right_raw, CV_RGBA2BGR);

            cv_image_left(cv::Rect(0, 0, 1280, 520)).copyTo(cv_image_left);
            cv_image_right(cv::Rect(0, 0, 1280, 520)).copyTo(cv_image_right);

            cv_image_left(cv::Rect(0, 0, 1280, 520)).copyTo(cv_image_left_raw);//
            cv_image_right(cv::Rect(0, 0, 1280, 520)).copyTo(cv_image_right_raw);

            double now = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
            now = now/1000;
            std::string left_img_path = data_dir_image_0 + to_string(counter) + ".png";
            std::string right_img_path = data_dir_image_1 + to_string(counter) + ".png";

            std::string left_img_path_raw = data_dir_image_0_raw + to_string(counter) + ".png";//
            std::string right_img_path_raw = data_dir_image_1_raw + to_string(counter) + ".png";
            
            cv::imwrite(left_img_path, cv_image_left);
            cv::imwrite(right_img_path, cv_image_right);

            cv::imwrite(left_img_path_raw, cv_image_left_raw);  //
            cv::imwrite(right_img_path_raw, cv_image_right_raw);

            file_obj << std::setprecision(20) << now << std::endl;
            // cv::Mat concat;
            // cv::vconcat(cv_image_left, cv_image_right, concat);
            cv::imshow("leadsense", cv_image_left);
            counter ++;
            // handleKey((char)cv::waitKey(1));
        }
    }
    cv::destroyAllWindows();
}
